{"version":3,"sources":["utils/constants.js","utils/conversions.js","contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/balloon.svg","App.js","reportWebVitals.js","index.js","utils/marketplace.js"],"names":["config","algodClient","algosdk","Algodv2","indexerClient","Indexer","myAlgoConnect","MyAlgoConnect","minRound","marketplaceNote","numLocalInts","numLocalBytes","numGlobalInts","numGlobalBytes","ALGORAND_DECIMALS","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","toFixed","stringToMicroAlgos","str","toNumber","base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","Cover","name","sub","coverImg","connect","className","style","height","src","Button","onClick","variant","Identicon","size","rest","width","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","link","setLink","price","setPrice","neededprice","setNeededPrice","isFormFilled","useCallback","console","log","Number","show","setShow","handleClose","Modal","onHide","centered","Header","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","maxLength","max","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","setCount","passed","pricepercent","Math","round","Col","Card","Badge","bg","alt","objectFit","Text","Link","min","required","role","styles","Loader","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","getProductsAction","then","catch","error","finally","_","useEffect","data","createProductAction","toast","buyProductAction","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","lookupAccountByID","do","response","_balance","account","connectWallet","accounts","_account","Container","fluid","Nav","cursor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalByteSlices","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint"],"mappings":"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","file":"static/js/main.04a27cae.chunk.js","sourcesContent":["import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n    algodToken: \"\",\r\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n    algodPort: \"\",\r\n    indexerToken: \"\",\r\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n    indexerPort: \"\",\r\n}\r\n\r\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\r\n\r\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\nexport const minRound = 21540981;\r\n\r\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\r\nexport const marketplaceNote = \"mj-marketplace:uv01\"\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0;\r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 4; // Global variables stored as Int: count, sold\r\nexport const numGlobalBytes = 4; // Global variables stored as Bytes: name, description, image, link\r\nexport const ALGORAND_DECIMALS = 6;\r\n","import {ALGORAND_DECIMALS} from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\n//...\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\r\n}\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n    if (!num) return\r\n    let bigNumber = new BigNumber(num)\r\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\r\n}\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n    if (!str) return\r\n    let bigNumber = new BigNumber(str)\r\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n}\r\nexport const base64ToUTF8String = (base64String) => {\r\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\r\n}\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n    return Buffer.from(utf8String, 'utf8').toString('base64')\r\n}","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l8\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l7\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"buy\\\"\\r\\n==\\r\\nbnz main_l4\\r\\nerr\\r\\nmain_l4:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CreatorAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Amount\\r\\nbyte \\\"PRICE\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n*\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\n&&\\r\\nbnz main_l6\\r\\nint 0\\r\\nreturn\\r\\nmain_l6:\\r\\nbyte \\\"SOLD\\\"\\r\\nbyte \\\"SOLD\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l7:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l8:\\r\\ntxn NumAppArgs\\r\\nint 6\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"mj-marketplace:uv01\\\"\\r\\n==\\r\\nassert\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\ntxna ApplicationArgs 5\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"LINK\\\"\\r\\ntxna ApplicationArgs 3\\r\\napp_global_put\\r\\nbyte \\\"PRICE\\\"\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"NEEDEDPRICE\\\"\\r\\ntxna ApplicationArgs 5\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"SOLD\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\nimport PropTypes from 'prop-types';\r\nimport { ReactSVG } from 'react-svg'\r\n\r\nconst Cover = ({name, sub, coverImg, connect}) => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black bg-gradient min-vh-100\">\r\n            <div className=\"mt-auto text-light mb-5\">\r\n            <div style={{height:50}} className=\"mb-5\"><ReactSVG src={coverImg}style={{height:50}} /></div>\r\n            <div className='pt-2 d-flex justify-content-center align-items-center flex-column text-center'>\r\n                <div className='w-75'>\r\n                <h1>{name}</h1>\r\n                <p className='fs-4'>{sub}</p>\r\n                </div>\r\n                </div>\r\n                <p>Please connect your wallet to continue.</p>\r\n                <Button\r\n                    onClick={() => connect()}\r\n                    variant=\"outline-light\"\r\n                    className=\"rounded-pill px-4 py-2 mt-3\"\r\n                >\r\n                    Connect Wallet\r\n                </Button>\r\n            </div>\r\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nCover.propTypes = {\r\n    name: PropTypes.string,\r\n    coverImg: PropTypes.string,\r\n    connect: PropTypes.func\r\n};\r\n\r\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Identicon = ({size, address, ...rest}) => (\r\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\r\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\r\n    </div>\r\n);\r\n\r\nIdenticon.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    address: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Identicon;","import React from 'react';\r\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\r\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\r\nimport Identicon from './utils/Identicon'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\r\n    if (!address) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\r\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\r\n                    {amount ? (\r\n                        <>\r\n                            {microAlgosToString(amount)}\r\n                            <span className=\"ms-1\"> {symbol}</span>\r\n                        </>\r\n                    ) : (\r\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\r\n                    )}\r\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu className=\"shadow-lg border-0\">\r\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\r\n                                   target=\"_blank\">\r\n                        <Stack direction=\"horizontal\" gap={2}>\r\n                            <i className=\"bi bi-person-circle fs-4\"/>\r\n                            <div className=\"d-flex flex-column\">\r\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\r\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Divider/>\r\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\r\n                        disconnect();\r\n                    }}>\r\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\r\n                        Disconnect\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n};\r\n\r\nWallet.propTypes = {\r\n    address: PropTypes.string,\r\n    name: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    disconnect: PropTypes.func\r\n};\r\n\r\nexport default Wallet;","import React, {useCallback, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\r\nimport {stringToMicroAlgos} from \"../../utils/conversions\";\r\n\r\nconst AddProduct = ({createProduct}) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [image, setImage] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [link, setLink] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [neededprice, setNeededPrice] = useState(0);\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        if(name.length > 162 || name.length < 1 ){ return false }\r\n        console.log(name)\r\n        if(image.length > 162 || image.length < 1 ){ return false }\r\n        console.log(image)\r\n        if(description.length > 162 || description.length < 1 ){ return false }\r\n        console.log(description)\r\n        if(link.length > 162 || link.length < 1 ){ return false }\r\n        console.log(link)\r\n        if((Number(price)/1000000) >= 100 || (Number(price)/1000000) < 1 ){ return false }\r\n        if((Number(neededprice)/1000000) >= 10000 || (Number(neededprice)/1000000) < 1 ){ return false }\r\n        if(Number(neededprice) < 0 || Number(price) < 0 ){ return false }\r\n        console.log(neededprice)\r\n        return true;\r\n    }, [name, image, description, link, price, neededprice]);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={handleShow}\r\n                variant=\"dark\"\r\n                className=\"rounded-pill px-0\"\r\n                style={{width: \"138px\"}}\r\n            >\r\n                <i className=\"bi bi-plus\"></i>\r\n                Add Project\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Header className=\"d-flex flex-column\">\r\n                    <Modal.Title>Raise Funds</Modal.Title>\r\n                    <p>Tell Us More About Your Project</p>\r\n                </Modal.Header>\r\n                <Form>\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputName\"\r\n                            label=\"Project Name\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    setName(e.target.value);\r\n                                }}\r\n                                placeholder=\"Enter name of project\"\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputUrl\"\r\n                            label=\"Image URL Of Your Project\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Image URL https://example.com/image.jpg\"\r\n                                value={image}\r\n                                onChange={(e) => {\r\n                                    setImage(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputDescription\"\r\n                            label=\"Description ( Max 162 Chars )\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                placeholder=\"I need 200 ALGOs to build a website to promote what I do\"\r\n                                maxLength={162}\r\n                                style={{ height: \"80px\" }}\r\n                                onChange={(e) => {\r\n                                    setDescription(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputLinkUrl\"\r\n                            label=\"Link To Proposal\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Link to your proposal\"\r\n                                value={link}\r\n                                onChange={(e) => {\r\n                                    setLink(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputPrice\"\r\n                            label=\"Each Donation (Max 99)\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                max={10}\r\n                                placeholder=\"Each Donation in ALGO (Max 99)\"\r\n                                onChange={(e) => {\r\n                                    setPrice(stringToMicroAlgos(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputNeededPrice\"\r\n                            label=\"Total Donation Goal (Max 9999)\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                max={10}\r\n                                placeholder=\"Total Needed Donation in ALGO (Max 9999)\"\r\n                                onChange={(e) => {\r\n                                    setNeededPrice(stringToMicroAlgos(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        disabled={!isFormFilled()}\r\n                        onClick={() => {\r\n                            createProduct({\r\n                                name,\r\n                                image,\r\n                                description,\r\n                                link,\r\n                                price,\r\n                                neededprice\r\n                            });\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        Save Project To Start Raising Funds\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAddProduct.propTypes = {\r\n    createProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProduct;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\r\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\r\n    const {name, image, description, link, price, neededprice, sold, appId, owner} =\r\n        product;\r\n\r\n    const [count, setCount] = useState(1)\r\n    let passed = microAlgosToString(price) * sold;\r\n    let pricepercent = Math.round((passed / microAlgosToString(neededprice))*100);\r\n    return (\r\n        <Col key={appId}>\r\n            <Card className=\"h-100\">\r\n                <Card.Header>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                    <Identicon size={28} address={owner}/>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                            {sold} Donated\r\n                        </Badge>\r\n                    </Stack>\r\n                </Card.Header>\r\n                <div className=\"ratio ratio-4x3\">\r\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\r\n                </div>\r\n                <Card.Body className=\"d-flex flex-column text-center\">\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n                    <Card.Link className=\"text-decoration-none pb-4 pt-2 fw-bold\" href={link} target=\"_blank\">View Proposal</Card.Link>\r\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\r\n                        <FloatingLabel\r\n                            controlId=\"inputCount\"\r\n                            label=\"Count\"\r\n                            className=\"w-25\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={count}\r\n                                min=\"1\"\r\n                                max=\"10\"\r\n                                required\r\n                                className=\"rounded-pill\"\r\n                                onChange={(e) => {\r\n                                    setCount(Number(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <Button\r\n                            variant=\"outline-dark\"\r\n                            disabled={microAlgosToString(price) * sold >= microAlgosToString(neededprice)}\r\n                            onClick={() => buyProduct(product, count)}\r\n                            className=\"rounded-pill w-75 py-3\">\r\n                            Donate {microAlgosToString(price) * count} ALGO{microAlgosToString(price) > 1 ? 's' : ''}\r\n                        </Button>\r\n                        {product.owner === address &&\r\n                            <Button\r\n                                variant=\"outline-danger\"\r\n                                onClick={() => deleteProduct(product)}\r\n                                className=\"rounded-pill btn\"\r\n                            >\r\n                                <i className=\"bi bi-trash\"></i>\r\n                            </Button>\r\n                        }\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                <div className=\"progress\">\r\n                    <div className=\"progress-bar\" role=\"progressbar\" styles={{width: `${pricepercent}%`}} aria-valuenow={passed} aria-valuemin=\"0\" aria-valuemax={microAlgosToString(neededprice)}>{pricepercent}%</div>\r\n                </div>\r\n                </Card.Footer>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nProduct.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    product: PropTypes.instanceOf(Object).isRequired,\r\n    buyProduct: PropTypes.func.isRequired,\r\n    deleteProduct: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Product;","import React from \"react\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n    <div className=\"d-flex justify-content-center h-300\">\r\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = () => (\r\n    <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable={false}\r\n        pauseOnHover\r\n    />\r\n);\r\n\r\nconst NotificationSuccess = ({text}) => (\r\n    <div>\r\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst NotificationError = ({text}) => (\r\n    <div>\r\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst Props = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n    text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport {Notification, NotificationSuccess, NotificationError};","import React, {useEffect, useState} from \"react\";\r\nimport {toast} from \"react-toastify\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport Product from \"./Product\";\r\nimport Loader from \"../utils/Loader\";\r\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\r\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Row} from \"react-bootstrap\";\r\n\r\nconst Products = ({address, fetchBalance}) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        getProductsAction()\r\n            .then(products => {\r\n                if (products) {\r\n                    setProducts(products);\r\n\t\t\t\t\tconsole.log(products);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    const createProduct = async (data) => {\r\n\t    setLoading(true);\r\n\t    createProductAction(address, data)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Product added successfully.\"/>);\r\n\t            getProducts();\r\n\t            fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error);\r\n\t            toast(<NotificationError text=\"Failed to create a product.\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    const buyProduct = async (product, count) => {\r\n\t    setLoading(true);\r\n\t    buyProductAction(address, product, count)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Product bought successfully\"/>);\r\n\t            getProducts();\r\n\t            fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error)\r\n\t            toast(<NotificationError text=\"Failed to purchase product.\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    const deleteProduct = async (product) => {\r\n        setLoading(true);\r\n        deleteProductAction(address, product.appId)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product deleted successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to delete product.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    if (loading) {\r\n\t    return <Loader/>;\r\n\t}\r\n\treturn (\r\n\t    <>\r\n\t        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n\t            <h1 className=\"fs-4 fw-bold mb-0\">FundRaising Projects</h1>\r\n\t            <AddProduct createProduct={createProduct}/>\r\n\t        </div>\r\n\t        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n\t            <>\r\n\t                {products.map((product, index) => (\r\n\t                    <Product\r\n\t                        address={address}\r\n\t                        product={product}\r\n\t                        buyProduct={buyProduct}\r\n\t                        deleteProduct={deleteProduct}\r\n\t                        key={index}\r\n\t                    />\r\n\t                ))}\r\n\t            </>\r\n\t        </Row>\r\n\t    </>\r\n\t);\r\n};\r\n\r\nProducts.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    fetchBalance: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Products;","export default __webpack_public_path__ + \"static/media/balloon.b900d592.svg\";","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Container, Nav} from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport coverImg from \"./assets/img/balloon.svg\"\n\nconst App = function AppWrapper() {\n\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  const connectWallet = async () => {\n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAddress(_account.address);\n              setName(_account.name);\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAddress(null);\n      setName(null);\n      setBalance(null);\n  };\n//..\nreturn (\n  <>\n      <Notification />\n      {address ? (\n          <Container fluid=\"md\">\n              <Nav className=\"justify-content-between pt-3 pb-5\">\n                  <Nav.Item>\n                      <h3 style={{cursor:'pointer'}}>HelpMeDoit</h3>\n                  </Nav.Item>\n                  <Nav.Item>\n                      <Wallet\n                          address={address}\n                          name={name}\n                          amount={balance}\n                          disconnect={disconnect}\n                          symbol={\"ALGO\"}\n                      />\n                  </Nav.Item>\n              </Nav>\n              <main>\n                  <Products address={address} fetchBalance={fetchBalance}/>\n              </main>\n          </Container>\n      ) : (\n          <Cover name={\"Help Me Do It\"} sub={\"A Decentralized Platform to Raise Funds ( in ALGOs ) For Your Most Important Project and Donate Some ALGO(s) To Help Your Fellows In Need\"} coverImg={coverImg} connect={connectWallet}/>\n      )}\n  </>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    marketplaceNote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytes,\r\n    numGlobalInts,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\r\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\r\n\r\nclass Product {\r\n    constructor(name, image, description, link, price, neededprice, sold, appId, owner) {\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.link = link;\r\n        this.price = price;\r\n        this.neededprice = neededprice;\r\n        this.sold = sold;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProductAction = async (senderAddress, product) => {\r\n    console.log(\"Adding Project...\")\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(marketplaceNote);\r\n    let name = new TextEncoder().encode(product.name);\r\n    let image = new TextEncoder().encode(product.image);\r\n    let description = new TextEncoder().encode(product.description);\r\n    let link = new TextEncoder().encode(product.link);\r\n    let price = algosdk.encodeUint64(product.price);\r\n    let neededprice = algosdk.encodeUint64(product.neededprice);\r\n\r\n    let appArgs = [name, image, description, link, price, neededprice]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalInts,\r\n        numGlobalByteSlices: numGlobalBytes,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return appId;\r\n}\r\n\r\nexport const buyProductAction = async (senderAddress, product, count) => {\r\n    console.log(\"Donating to Product...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Build required app args as Uint8Array\r\n    let buyArg = new TextEncoder().encode(\"buy\")\r\n    let countArg = algosdk.encodeUint64(count);\r\n    let appArgs = [buyArg, countArg]\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: product.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs\r\n    })\r\n\r\n    // Create PaymentTxn\r\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: senderAddress,\r\n        to: product.owner,\r\n        amount: product.price * count,\r\n        suggestedParams: params\r\n    })\r\n\r\n    let txnArray = [appCallTxn, paymentTxn]\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray)\r\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n}\r\n\r\nexport const deleteProductAction = async (senderAddress, index) => {\r\n    console.log(\"Deleting application...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Create ApplicationDeleteTxn\r\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n        from: senderAddress, suggestedParams: params, appIndex: index,\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get application id of deleted application and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['txn']['txn'].apid;\r\n    console.log(\"Deleted app-id: \", appId);\r\n}\r\n\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getProductsAction = async () => {\r\n    console.log(\"Fetching products...\")\r\n    let note = new TextEncoder().encode(marketplaceNote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let products = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let product = await getApplication(appId)\r\n            if (product) {\r\n                products.push(product)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Products fetched.\")\r\n    return products\r\n}\r\n\r\nconst getApplication = async (appId) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return product\r\n        let owner = response.application.params.creator\r\n        let name = \"\"\r\n        let image = \"\"\r\n        let description = \"\"\r\n        let link = \"\"\r\n        let price = 0\r\n        let neededprice = 0\r\n        let sold = 0\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"NAME\", globalState) !== undefined) {\r\n            let field = getField(\"NAME\", globalState).value.bytes\r\n            name = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"IMAGE\", globalState) !== undefined) {\r\n            let field = getField(\"IMAGE\", globalState).value.bytes\r\n            image = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\r\n            description = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"LINK\", globalState) !== undefined) {\r\n            let field = getField(\"LINK\", globalState).value.bytes\r\n            link = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"PRICE\", globalState) !== undefined) {\r\n            price = getField(\"PRICE\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"NEEDEDPRICE\", globalState) !== undefined) {\r\n            neededprice = getField(\"NEEDEDPRICE\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"SOLD\", globalState) !== undefined) {\r\n            sold = getField(\"SOLD\", globalState).value.uint\r\n        }\r\n\r\n        return new Product(name, image, description, link, price, neededprice, sold, appId, owner)\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}"],"sourceRoot":""}