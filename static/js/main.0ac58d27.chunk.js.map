{"version":3,"sources":["utils/comments.js","utils/conversions.js","contracts/HMDI_profile_approval.teal","contracts/HMDI_profile_clear.teal","contracts/HMDI_approval.teal","contracts/HMDI_clear.teal","contracts/HMDI_comments_approval.teal","contracts/HMDI_comments_clear.teal","components/Copyright.jsx","components/Cover.jsx","components/utils/Identicon.jsx","components/marketplace/AddProfile.jsx","components/utils/Notifications.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","pages/Products.jsx","assets/img/balloon.svg","components/marketplace/ProductSingle.jsx","components/marketplace/AddComment.jsx","components/marketplace/Comment.jsx","components/marketplace/Comments.jsx","pages/SingleProduct.jsx","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js","utils/profile.js"],"names":["Comments","uid","comment","appId","owner","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","do","compileResponse","Uint8Array","Buffer","from","result","createCommentAction","senderAddress","comments","console","log","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","HMDICommentsNote","uidd","encodeUint64","Number","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalIntsComments","numGlobalByteSlices","numGlobalBytesComments","txId","txID","toString","myAlgoConnect","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","getCommentsAction","encodedNote","indexerClient","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","response","application","deleted","globalState","creator","getField","fieldName","find","state","key","utf8ToBase64String","undefined","field","value","bytes","base64ToUTF8String","uint","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","base64String","utf8String","Copyright","className","href","Cover","name","title","sub","coverImg","connect","Container","Nav","Item","style","cursor","fontWeight","display","src","Button","onClick","variant","Row","xs","sm","md","lg","Col","Identicon","size","rest","width","height","diameter","seed","parseInt","AddProfile","createProfile","useState","setName","image","setImage","bio","setBio","link","setLink","profileImg","setProfileImg","showprofile","setShowprofile","handleClose","sendFileToIPFS","e","formData","FormData","append","axios","method","url","data","headers","process","resFile","ImgHash","IpfsHash","isFormFilled","useCallback","Stack","direction","gap","Modal","show","onHide","centered","Header","Title","Form","id","Body","FloatingLabel","controlId","label","Control","type","onChange","target","placeholder","Label","f","files","accept","Image","rounded","as","maxLength","Footer","disabled","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","tx_id","algoExpTest","NotificationError","DefaultProps","defaultProps","Wallet","amount","symbol","disconnect","setProfile","setLoading","getProfile","getProfileAction","then","profiles","catch","error","finally","_","useEffect","createProfileAction","toast","Dropdown","Toggle","align","Spinner","animation","Menu","Divider","AddProduct","createProduct","description","setDescription","donation","setDonation","fileImg","setFileImg","goaldonation","setGoaldonation","sendproFileToIPFS","setShow","max","Product","product","buyProduct","deleteProduct","donated","uwallets","passed","pricepercent","Math","round","Card","Badge","bg","alt","objectFit","Text","backgroundColor","role","Link","Loader","Products","fetchBalance","products","setProducts","loading","getProducts","getProductsAction","createProductAction","count","buyProductAction","deleteProductAction","map","index","ProductSingle","setIsMobile","handleResize","window","innerWidth","addEventListener","setCount","navigator","share","Select","AddComment","createComment","setComment","Comment","gComments","setComments","getComments","results","SingleProduct","URLSearchParams","location","search","get","getProductAction","likeProject","App","localStorage","getItem","setAddress","balance","setBalance","accountAddress","lookupAccountByID","_balance","account","connectWallet","accounts","_account","setItem","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","HMDINote","numGlobalBytes","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","applicationID","config","Algodv2","Indexer","MyAlgoConnect","HMDIProfilesNote","numGlobalIntsProfiles","numGlobalBytesProfiles","Profile","profile","editProfileAction","editArg"],"mappings":"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","file":"static/js/main.0ac58d27.chunk.js","sourcesContent":["import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    HMDICommentsNote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytesComments,\r\n    numGlobalIntsComments,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/HMDI_comments_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/HMDI_comments_clear.teal\";\r\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\r\n\r\nclass Comments {\r\n    constructor(uid, comment, appId, owner) {\r\n        this.uid = uid;\r\n        this.comment = comment;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createCommentAction = async (senderAddress, comments, uid) => {\r\n    console.log(\"Adding Comment...\" + uid)\r\n    console.log(comments);\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(HMDICommentsNote);\r\n    let comment = new TextEncoder().encode(comments.comment);\r\n    let uidd = algosdk.encodeUint64(Number(uid));\r\n    let appArgs = [uidd, comment]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalIntsComments,\r\n        numGlobalByteSlices: numGlobalBytesComments,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return [appId,txId];\r\n}\r\n\r\n\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getCommentsAction = async (uid) => {\r\n    console.log(\"Fetching comments...\")\r\n    let note = new TextEncoder().encode(HMDICommentsNote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let comments = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let comment = await getApplication(appId, uid)\r\n            if (comment) {\r\n                comments.push(comment)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Comments fetched.\")\r\n    return comments\r\n}\r\n\r\nconst getApplication = async (appId, uidd) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return product\r\n        let owner = response.application.params.creator\r\n        let comment = \"\"\r\n        let uid = \"\"\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"COMMENT\", globalState) !== undefined) {\r\n            let field = getField(\"COMMENT\", globalState).value.bytes\r\n            comment = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"UID\", globalState) !== undefined) {\r\n            uid = getField(\"UID\", globalState).value.uint\r\n        }\r\n\r\n        if (uidd === uid) {\r\n            return new Comments(uid, comment, appId, owner)\r\n        } else {\r\n            return null\r\n        }\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}","import {ALGORAND_DECIMALS} from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\n//...\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\r\n}\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n    if (!num) return\r\n    let bigNumber = new BigNumber(num)\r\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\r\n}\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n    if (!str) return\r\n    let bigNumber = new BigNumber(str)\r\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n}\r\nexport const base64ToUTF8String = (base64String) => {\r\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\r\n}\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n    return Buffer.from(utf8String, 'utf8').toString('base64')\r\n}","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l6\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l5\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"edit\\\"\\r\\n==\\r\\nbnz main_l4\\r\\nerr\\r\\nmain_l4:\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"BIO\\\"\\r\\ntxna ApplicationArgs 3\\r\\napp_global_put\\r\\nbyte \\\"LINK\\\"\\r\\ntxna ApplicationArgs 4\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l5:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l6:\\r\\ntxn NumAppArgs\\r\\nint 5\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"HMDI-profiles:uv001\\\"\\r\\n==\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"BIO\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"LINK\\\"\\r\\ntxna ApplicationArgs 3\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l8\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l7\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"donate\\\"\\r\\n==\\r\\nbnz main_l4\\r\\nerr\\r\\nmain_l4:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CreatorAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Amount\\r\\nbyte \\\"DONATION\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n*\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\n&&\\r\\nbnz main_l6\\r\\nint 0\\r\\nreturn\\r\\nmain_l6:\\r\\nbyte \\\"DONATED\\\"\\r\\nbyte \\\"DONATED\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n+\\r\\napp_global_put\\r\\nbyte \\\"UWALLETS\\\"\\r\\nbyte \\\"UWALLETS\\\"\\r\\napp_global_get\\r\\nint 1\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l7:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l8:\\r\\ntxn NumAppArgs\\r\\nint 6\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"HMDI:uv001\\\"\\r\\n==\\r\\nassert\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\ntxna ApplicationArgs 5\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"LINK\\\"\\r\\ntxna ApplicationArgs 3\\r\\napp_global_put\\r\\nbyte \\\"DONATION\\\"\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"GOALDONATION\\\"\\r\\ntxna ApplicationArgs 5\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"DONATED\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nbyte \\\"UWALLETS\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l2\\r\\nerr\\r\\nmain_l2:\\r\\ntxn NumAppArgs\\r\\nint 2\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"HMDI-comments:uv001\\\"\\r\\n==\\r\\nassert\\r\\nbyte \\\"UID\\\"\\r\\ntxna ApplicationArgs 0\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"COMMENT\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","const Copyright = () => {\r\n    return <div className=\"position-fixed bottom-0 left-0 bg-black bg-opacity-50 w-100 text-center\">\r\n        <p className=\"text-secondary w-100 pt-2\">\r\n            Developed By\r\n            <a href=\"https://twitter.com/SamyWalters\" className='px-1 text-light'>Sam</a>\r\n            Powered by Algorand</p>\r\n    </div>\r\n}\r\n\r\nexport default Copyright;","import React from 'react';\r\nimport { Button, Col, Container, Nav, Row } from \"react-bootstrap\";\r\nimport PropTypes from 'prop-types';\r\nimport { ReactSVG } from 'react-svg'\r\nimport Copyright from './Copyright';\r\n\r\nconst Cover = ({ name, title, sub, coverImg, connect }) => {\r\n    return (\r\n        <Container><Nav className=\"justify-content-between pt-3 px-3\">\r\n        <Nav.Item>\r\n            <h2 style={{cursor:'pointer',fontWeight:'bold',display:'flex'}}><ReactSVG src={coverImg} />HMDI</h2>\r\n            \r\n        </Nav.Item>\r\n        <Nav.Item>\r\n            <Button\r\n                    onClick={() => connect()}\r\n                    variant=\"light\"\r\n                    className=\"rounded rounded-pill px-3 py-2\">\r\n                    Connect Wallet\r\n                </Button>\r\n        </Nav.Item>\r\n    </Nav>\r\n        <main className=\"d-flex flex-column justify-content-center align-items-center desktop-vh-100 mobile-block\">\r\n            <Row xs={1} sm={1} md={2} lg={2} className=\"text-light mobile-pt-1\">\r\n                <Col xs={12} sm={12} md={6} lg={6} className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <div className=\"p-5 rounded bg-dark\">\r\n                <h2 className='fs-01'>{title}</h2>\r\n                </div>\r\n                </Col>\r\n                <Col xs={12} sm={12} md={6} lg={6} className=\"mobile-center\">\r\n                <div className='pt-2 mobile-pt-1 mobile-center'>\r\n                    <div className='w-75'>\r\n                        <h1 className='fs-3 fw-bold'>{name}</h1>\r\n                        <p className='fs-5 cover-sub'>{sub}</p>\r\n                    </div>\r\n                </div>\r\n                <p>Please Login with your wallet to Get Started.</p>\r\n                <Button\r\n                    onClick={() => connect()}\r\n                    variant=\"dark\"\r\n                    className=\"rounded px-5 py-2 mt-1\">\r\n                    Get Started\r\n                </Button>\r\n                </Col>\r\n            </Row>\r\n            <Copyright />\r\n        </main>\r\n        </Container>\r\n    );\r\n};\r\n\r\nCover.propTypes = {\r\n    name: PropTypes.string,\r\n    coverImg: PropTypes.string,\r\n    connect: PropTypes.func\r\n};\r\n\r\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Identicon = ({size, address, ...rest}) => (\r\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\r\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\r\n    </div>\r\n);\r\n\r\nIdenticon.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    address: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Identicon;","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Image, Modal, Stack } from \"react-bootstrap\";\r\nimport axios from 'axios';\r\n\r\nconst AddProfile = ({ createProfile }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [image, setImage] = useState(\"\");\r\n    const [bio, setBio] = useState(\"\");\r\n    const [link, setLink] = useState(\"\");\r\n    const [profileImg, setProfileImg] = useState(null);\r\n    const [showprofile, setShowprofile] = useState(false);\r\n\r\n    const handleClose = () => setShowprofile(false);\r\n    const handleShow = () => setShowprofile(true);\r\n\r\n    const sendFileToIPFS = async (e) => {\r\n        if (profileImg) {\r\n            try {\r\n\r\n                const formData = new FormData();\r\n                formData.append(\"file\", profileImg);\r\n                console.log('uploading file to ipfs')\r\n                const resFile = await axios({\r\n                    method: \"post\",\r\n                    url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n                    data: formData,\r\n                    headers: {\r\n                        'Authorization': `Bearer ${process.env.REACT_APP_PINATA_JWT}`,\r\n                        'pinata_api_key': `${process.env.REACT_APP_PINATA_API_KEY}`,\r\n                        'pinata_secret_api_key': `${process.env.REACT_APP_PINATA_API_SECRET}`,\r\n                        \"Content-Type\": \"multipart/form-data\"\r\n                    },\r\n                });\r\n\r\n                const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n                console.log(ImgHash);\r\n                setImage(ImgHash);\r\n                //Take a look at your Pinata Pinned section, you will see a new file added to you list.   \r\n\r\n            } catch (error) {\r\n                console.log(\"Error sending File to IPFS: \")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        if (name.length > 112 || name.length < 1) { return false }\r\n        console.log(name)\r\n        if (image.length > 112 || image.length < 1) { return false }\r\n        console.log(image)\r\n        if (bio.length > 112 || bio.length < 1) { return false }\r\n        console.log(bio)\r\n        if (link.length > 112 || link.length < 1) { return false }\r\n        console.log(link)\r\n        return true;\r\n    }, [name, image, bio, link]);\r\n\r\n    \r\n    return (\r\n        <>\r\n            <Stack onClick={handleShow} direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person fs-4\" />\r\n                <div className=\"d-flex flex-column\">\r\n                    <span className=\"font-monospace\">Your Profile</span>\r\n                </div>\r\n            </Stack>\r\n            <Modal show={showprofile} onHide={handleClose} centered>\r\n                <Modal.Header className=\"d-flex flex-column\">\r\n                    <Modal.Title>Add Profile</Modal.Title>\r\n                    <p>Your on-chain profile</p>\r\n                </Modal.Header>\r\n                <Form id=\"profileform\">\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputProfileName\"\r\n                            label=\"Name\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    setName(e.target.value);\r\n                                }}\r\n                                placeholder=\"Enter Name\"\r\n                            />\r\n                        </FloatingLabel>\r\n                        <Form.Label>Select Profile Image</Form.Label>\r\n                        <div className=\"d-flex gap-2 mb-3\">\r\n                            <Form.Control aria-controls=\"proFile\" id=\"proFile\" type=\"file\" onChange={(f) => setProfileImg(f.target.files[0])} accept=\"image/x-png,image/gif,image/jpeg\" />\r\n                            <Button variant=\"primary\" onClick={sendFileToIPFS}>\r\n                                Upload\r\n                            </Button>\r\n                        </div>\r\n                        {image !== \"\" &&\r\n                            <div className=\"mb-3\">\r\n                                <Image src={image} rounded className=\"w-100\" />\r\n                            </div>}\r\n                        <FloatingLabel\r\n                            controlId=\"inputBio\"\r\n                            label={`Bio ( ${bio.length}/112 Chars )`}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                placeholder=\"Junior Blockchain Developer, Farmer\"\r\n                                maxLength={112}\r\n                                style={{ height: \"80px\" }}\r\n                                onChange={(e) => {\r\n                                    setBio(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputProfileLink\"\r\n                            label=\"Your Link\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Link to your website or whatever\"\r\n                                value={link}\r\n                                onChange={(e) => {\r\n                                    setLink(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        disabled={!isFormFilled()}\r\n                        onClick={() => {\r\n                            createProfile({\r\n                                name,\r\n                                image,\r\n                                bio,\r\n                                link\r\n                            });\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        Save Profile\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAddProfile.propTypes = {\r\n    createProfile: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProfile;","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport { algoExpTest } from \"../../utils/constants\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Notification = () => (\r\n    <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable={false}\r\n        pauseOnHover\r\n    />\r\n);\r\n\r\nconst NotificationSuccess = ({ text, tx_id, type ='tx'}) => (\r\n    <div className=\"d-flex\">\r\n        <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n        <Button\r\n            href={algoExpTest+type+\"/\"+tx_id}\r\n            target=\"_blank\"\r\n            variant=\"dark\"\r\n            className=\"rounded-pill px-0 mx-1 d-flex justify-content-center align-items-center\"\r\n            style={{ width: \"55px\" }}>\r\n            <i className=\"bi bi-arrow-up-right-square text-light\"></i>\r\n        </Button>\r\n    </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n    <div>\r\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst Props = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n    text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };","import React, {useEffect, useState} from \"react\";\r\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\r\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\r\nimport Identicon from './utils/Identicon'\r\nimport PropTypes from \"prop-types\";\r\nimport AddProfile from './marketplace/AddProfile';\r\nimport { createProfileAction, editProfileAction, getProfileAction } from '../utils/profile';\r\nimport {toast} from \"react-toastify\";\r\nimport {NotificationError, NotificationSuccess} from \"../components/utils/Notifications\";\r\n\r\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\r\n    const [profile, setProfile] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const getProfile = async () => {\r\n        setLoading(true);\r\n        getProfileAction()\r\n            .then(profiles => {\r\n                if (profiles.length > 0) {\r\n                    setProfile(profiles[0]);\r\n\t\t\t\t\tconsole.log(profiles[0]);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getProfile();\r\n    }, []);\r\n    if (!address) {\r\n        return null;\r\n    }\r\n    const createProfile = async (data) => {\r\n\t    setLoading(true);\r\n\t    createProfileAction(address, data)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Profile added successfully.\"/>);\r\n\t            getProfile();\r\n\t            //fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error);\r\n\t            toast(<NotificationError text=\"Failed to create a Profile.\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    const editProfile = async (data) => {\r\n\t    setLoading(true);\r\n\t    editProfileAction(address, data)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Profile Updated\"/>);\r\n\t            getProfile();\r\n\t            //fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error)\r\n\t            toast(<NotificationError text=\"Failed to Update Profile. Please Try Again\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n    return (\r\n        <>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"dark\" align=\"end\" id=\"dropdown-basic\"\r\n                                 className=\"d-flex align-items-center border rounded-pill py-2 px-3\">\r\n                    {amount ? (\r\n                        <>\r\n                            {microAlgosToString(amount)}\r\n                            <span className=\"ms-1\"> {symbol}</span>\r\n                        </>\r\n                    ) : (\r\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\r\n                    )}\r\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu className=\"shadow-lg border-0\">\r\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\r\n                                   target=\"_blank\">\r\n                        <Stack direction=\"horizontal\" gap={2}>\r\n                            <i className=\"bi bi-person-circle fs-4\"/>\r\n                            <div className=\"d-flex flex-column\">\r\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\r\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item>\r\n                        <AddProfile createProfile={createProfile} />\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Divider/>\r\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\r\n                        disconnect();\r\n                    }}>\r\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\r\n                        Disconnect\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n};\r\n\r\nWallet.propTypes = {\r\n    address: PropTypes.string,\r\n    name: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    disconnect: PropTypes.func\r\n};\r\n\r\nexport default Wallet;","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Image, Modal } from \"react-bootstrap\";\r\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\r\nimport axios from 'axios';\r\n\r\nconst AddProduct = ({ createProduct }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [image, setImage] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [link, setLink] = useState(\"\");\r\n    const [donation, setDonation] = useState(0);\r\n    const [fileImg, setFileImg] = useState(null);\r\n    const [goaldonation, setGoaldonation] = useState(0);\r\n\r\n    const sendproFileToIPFS = async (e) => {\r\n        if (fileImg) {\r\n            try {\r\n\r\n                const formData = new FormData();\r\n                formData.append(\"file\", fileImg);\r\n                console.log('uploading file to ipfs')\r\n                const resFile = await axios({\r\n                    method: \"post\",\r\n                    url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n                    data: formData,\r\n                    headers: {\r\n                        'Authorization': `Bearer ${process.env.REACT_APP_PINATA_JWT}`,\r\n                        'pinata_api_key': `${process.env.REACT_APP_PINATA_API_KEY}`,\r\n                        'pinata_secret_api_key': `${process.env.REACT_APP_PINATA_API_SECRET}`,\r\n                        \"Content-Type\": \"multipart/form-data\"\r\n                    },\r\n                });\r\n\r\n                const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n                console.log(ImgHash);\r\n                setImage(ImgHash);\r\n                //Take a look at your Pinata Pinned section, you will see a new file added to you list.   \r\n\r\n            } catch (error) {\r\n                console.log(\"Error sending File to IPFS: \")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        if (name.length > 162 || name.length < 1) { return false }\r\n        console.log(name)\r\n        if (image.length > 162 || image.length < 1) { return false }\r\n        console.log(image)\r\n        if (description.length > 162 || description.length < 1) { return false }\r\n        console.log(description)\r\n        if (link.length > 162 || link.length < 1) { return false }\r\n        console.log(link)\r\n        if ((Number(donation) / 1000000) >= 100 || (Number(donation) / 1000000) < 1) { return false }\r\n        if ((Number(goaldonation) / 1000000) >= 10000 || (Number(goaldonation) / 1000000) < 1) { return false }\r\n        if (Number(goaldonation) < 0 || Number(donation) < 0) { return false }\r\n        console.log(goaldonation)\r\n        return true;\r\n    }, [name, image, description, link, donation, goaldonation]);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={handleShow}\r\n                variant=\"dark\"\r\n                className=\"rounded-pill px-0\"\r\n                style={{ width: \"138px\" }}\r\n            >\r\n                <i className=\"bi bi-plus\"></i>\r\n                Add Project\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Header className=\"d-flex flex-column\">\r\n                    <Modal.Title>Raise Funds</Modal.Title>\r\n                    <p>Tell Us More About Your Project</p>\r\n                </Modal.Header>\r\n                <Form>\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputName\"\r\n                            label=\"Project Name\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    setName(e.target.value);\r\n                                }}\r\n                                placeholder=\"Enter name of project\"\r\n                            />\r\n                        </FloatingLabel>\r\n                        <Form.Label>Select Image</Form.Label>\r\n                        <div className=\"d-flex gap-2 mb-3\">\r\n                            <Form.Control type=\"file\" onChange={(e) => setFileImg(e.target.files[0])} accept=\"image/x-png,image/gif,image/jpeg\" />\r\n                            <Button variant=\"primary\" onClick={sendproFileToIPFS}>\r\n                                Upload\r\n                            </Button>\r\n                        </div>\r\n                        {image !== \"\" &&\r\n                        <div className=\"mb-3\">\r\n                            <Image src={image} rounded className=\"w-100\" />\r\n                        </div>}\r\n                        <FloatingLabel\r\n                            controlId=\"inputDescription\"\r\n                            label={`Description ( ${description.length}/112 Chars )`}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                placeholder=\"I need 200 ALGOs to build a website to promote what I do\"\r\n                                maxLength={162}\r\n                                style={{ height: \"80px\" }}\r\n                                onChange={(e) => {\r\n                                    setDescription(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputLinkUrl\"\r\n                            label=\"Link To Proposal or Website\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Link to your proposal\"\r\n                                value={link}\r\n                                onChange={(e) => {\r\n                                    setLink(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputDonation\"\r\n                            label=\"Each Donation (Max 99)\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                max={10}\r\n                                placeholder=\"Each Donation in ALGO (Max 99)\"\r\n                                onChange={(e) => {\r\n                                    setDonation(stringToMicroAlgos(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputGoaldonation\"\r\n                            label=\"Total Donation Goal (Max 9999)\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                max={10}\r\n                                placeholder=\"Total Needed Donation in ALGO (Max 9999)\"\r\n                                onChange={(e) => {\r\n                                    setGoaldonation(stringToMicroAlgos(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        disabled={!isFormFilled()}\r\n                        onClick={() => {\r\n                            createProduct({\r\n                                name,\r\n                                image,\r\n                                description,\r\n                                link,\r\n                                donation,\r\n                                goaldonation\r\n                            });\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        Save Project To Start Raising Funds\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAddProduct.propTypes = {\r\n    createProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProduct;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\r\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\r\n    const {name, image, description, link, donation, goaldonation, donated, uwallets, appId, owner} =\r\n        product;\r\n\r\n    const [count, setCount] = useState(1)\r\n    let passed = microAlgosToString(donation) * donated;\r\n    let pricepercent = Math.round((passed / microAlgosToString(goaldonation))*100);\r\n\r\n    return (\r\n        <Col key={appId}>\r\n            <Card className=\"h-100 bg-dark\">\r\n                <Card.Header>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                    <Identicon size={28} address={owner}/>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                            {uwallets} Donations\r\n                        </Badge>\r\n                    </Stack>\r\n                </Card.Header>\r\n                <div className=\"ratio ratio-16x9\">\r\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\r\n                </div>\r\n                <Card.Body className=\"d-flex flex-column text-light\">\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n                    {/* <Form className=\"d-flex align-content-stretch flex-row gap-2 mt-2\">\r\n                        <FloatingLabel\r\n                            controlId=\"inputCount\"\r\n                            label=\"Count\"\r\n                            className=\"w-25\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={count}\r\n                                min=\"1\"\r\n                                max=\"10\"\r\n                                required\r\n                                className=\"bg-dark text-light\"\r\n                                onChange={(e) => {\r\n                                    setCount(Number(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <Button\r\n                            variant={(pricepercent === 100 ? 'success': 'light')}\r\n                            disabled={microAlgosToString(price) * sold >= microAlgosToString(neededprice)}\r\n                            onClick={() => buyProduct(product, count)}\r\n                            className=\"w-75 py-3\">\r\n                                { (pricepercent >= 100) ? (<b>Goal Reached</b>) :(<b>Donate {microAlgosToString(price) * count} ALGO{microAlgosToString(price) > 1 ? 's' : ''}</b>) }\r\n                        </Button>\r\n                        {product.owner === address &&\r\n                            <Button\r\n                                variant=\"outline-danger\"\r\n                                onClick={() => deleteProduct(product)}\r\n                                className=\"btn\"\r\n                            >\r\n                                <i className=\"bi bi-trash\"></i>\r\n                            </Button>\r\n                        }\r\n                    </Form> */}\r\n                    <div className=\"progress\" style={{backgroundColor:'#171717'}}>\r\n                        <div className={\"progress-bar\" + (pricepercent === 100 ? ' bg-success': '')} role=\"progressbar\" style={{ width: `${pricepercent}%` }} aria-valuenow={pricepercent} aria-valuemin=\"0\" aria-valuemax={\"100\"}>{pricepercent}%</div>\r\n                    </div>\r\n                <p className=\"w-100 text-center pt-4 pb-0 fs-7 text-secondary\"><b>{passed} ALGOs</b> raised of <b>{goaldonation/1000000} Goal</b></p>\r\n                <Card.Link className={\"text-decoration-none pb-3 pt-3 fw-bold text-center text-light w-100 rounded bg-\"+(pricepercent === 100 ? 'success': 'primary')} href={'?appId='+appId} >{ (pricepercent >= 100) ? (<b>Goal Reached</b>) :(<b>Fund Project</b>) }</Card.Link>\r\n                </Card.Body>\r\n                \r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nProduct.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    product: PropTypes.instanceOf(Object).isRequired,\r\n    buyProduct: PropTypes.func.isRequired,\r\n    deleteProduct: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Product;","import React from \"react\";\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Loader = ({height='400px'}) => (\r\n    <div className=\"d-flex justify-content-center text-light align-items-center\" style={{height:`${height}`}}>\r\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-50\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n);\r\n\r\nLoader.propTypes = {\r\n    height: PropTypes.number,\r\n};\r\nexport default Loader;","import React, {useEffect, useState} from \"react\";\r\nimport {toast} from \"react-toastify\";\r\nimport AddProduct from \"../components/marketplace/AddProduct\";\r\nimport Product from \"../components/marketplace/Product\";\r\nimport Loader from \"../components/utils/Loader\";\r\nimport {NotificationError, NotificationSuccess} from \"../components/utils/Notifications\";\r\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Row} from \"react-bootstrap\";\r\n\r\nconst Products = ({address, fetchBalance}) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        getProductsAction()\r\n            .then(products => {\r\n                if (products) {\r\n                    setProducts(products);\r\n\t\t\t\t\tconsole.log(products);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    const createProduct = async (data) => {\r\n\t    setLoading(true);\r\n\t    createProductAction(address, data)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Project added successfully.\"/>);\r\n\t            getProducts();\r\n\t            fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error);\r\n\t            toast(<NotificationError text=\"Failed to create a project.\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    const buyProduct = async (product, count) => {\r\n\t    setLoading(true);\r\n\t    buyProductAction(address, product, count)\r\n\t        .then(() => {\r\n\t            toast(<NotificationSuccess text=\"Donated to Project successfully\"/>);\r\n\t            getProducts();\r\n\t            fetchBalance(address);\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error)\r\n\t            toast(<NotificationError text=\"Failed to Donate Project. Please Try Again\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    const deleteProduct = async (product) => {\r\n        setLoading(true);\r\n        deleteProductAction(address, product.appId)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Project deleted successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to delete project.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    if (loading) {\r\n\t    return <Loader/>;\r\n\t}\r\n\treturn (\r\n\t    <>\r\n\t        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n\t            <h1 className=\"fs-4 fw-bold mb-0\">FundRaising Projects</h1>\r\n\t            <AddProduct createProduct={createProduct}/>\r\n\t        </div>\r\n\t        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n\t            <>\r\n\t                {products.map((product, index) => (\r\n\t                    <Product\r\n\t                        address={address}\r\n\t                        product={product}\r\n\t                        buyProduct={buyProduct}\r\n\t                        deleteProduct={deleteProduct}\r\n\t                        key={index}\r\n\t                    />\r\n\t                ))}\r\n\t            </>\r\n\t        </Row>\r\n\t    </>\r\n\t);\r\n};\r\n\r\nProducts.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    fetchBalance: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Products;","export default __webpack_public_path__ + \"static/media/balloon.f4aa06f0.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Badge, Button, Card, Row, Col, FloatingLabel, Form, Stack, Image } from \"react-bootstrap\";\r\nimport { microAlgosToString, truncateAddress } from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst ProductSingle = ({ address, product, buyProduct, deleteProduct }) => {\r\n    const { name, image, description, link, donation, goaldonation, donated, uwallets, appId, owner } =\r\n        product;\r\n    const [isMobile, setIsMobile] = useState(false)\r\n\r\n    //choose the screen size \r\n    const handleResize = () => {\r\n        if (window.innerWidth < 992) {\r\n            setIsMobile(true)\r\n        } else {\r\n            setIsMobile(false)\r\n        }\r\n    }\r\n\r\n    const shareIt = () => {\r\n        navigator.share({\r\n            title: name,\r\n            text: description,\r\n            url: `${process.env.REACT_APP_SITE_URL}?appId=${appId}`\r\n        });\r\n    }\r\n\r\n    // create an event listener\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", handleResize)\r\n    })\r\n    const [count, setCount] = useState(1)\r\n    let passed = microAlgosToString(donation) * donated;\r\n    let pricepercent = Math.round((passed / microAlgosToString(goaldonation)) * 100);\r\n    return (\r\n        <Row xs={1} sm={1} lg={2} className=\"g-1 mb-5 g-xl-2 g-xxl-2\">\r\n            <Col key={appId} xs={12} sm={12} lg={8}>\r\n                <Card className=\"h-100 bg-dark\">\r\n                    <Image rounded src={image} alt={name} />\r\n                    <Card.Body className=\"d-flex flex-column text-light\">\r\n                        <Card.Title>{name}</Card.Title>\r\n                        <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n                        <Card.Link className=\"text-decoration-none pb-3 pt-3 fw-bold text-center w-100 border border-primary rounded\" href={link} target=\"_blank\">View Proposal</Card.Link>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n            <Col key={appId + \"b\"} xs={12} sm={12} lg={4}>\r\n                <Card className=\"h-100 bg-dark\">\r\n                    <Card.Body className=\"d-flex flex-column text-light\">\r\n                        <p className=\"w-100 text-center fs-6 text-secondary\"><b>{passed} ALGOs</b> raised of <b>{goaldonation / 1000000} Goal</b></p>\r\n\r\n                        <div className=\"progress mb-2\" style={{ backgroundColor: '#171717' }}>\r\n                            <div className={\"progress-bar\" + (pricepercent === 100 ? ' bg-success' : '')} role=\"progressbar\" style={{ width: `${pricepercent}%` }} aria-valuenow={pricepercent} aria-valuemin=\"0\" aria-valuemax={\"100\"}>{pricepercent}%</div>\r\n                        </div>\r\n\r\n\r\n                        <p className=\"fs-6 mb-2\">\r\n                            {uwallets} Donations\r\n                        </p>\r\n                        <Form className=\"d-flex align-content-stretch flex-column gap-2 mb-2\">\r\n                            <Button\r\n                                variant={'danger'}\r\n                                onClick={shareIt}\r\n                                className=\"w-100 py-3 bg-orange fs-5\">\r\n                                Share\r\n                            </Button>\r\n                            <Button\r\n                                variant={(pricepercent === 100 ? 'success' : 'light')}\r\n                                disabled={microAlgosToString(donation) * donated >= microAlgosToString(goaldonation)}\r\n                                onClick={() => buyProduct(product, count)}\r\n                                className=\"w-100 py-3 fs-5\">\r\n                                {(pricepercent >= 100) ? (<span>Goal Reached</span>) : (<span>Donate {microAlgosToString(donation) * count} ALGO{microAlgosToString(donation) > 1 ? 's' : ''}</span>)}\r\n                            </Button>\r\n                            <Form.Select \r\n                            value={count}\r\n                            className=\"py-3\"\r\n                            onChange={(e) => {\r\n                                setCount(Number(e.target.value));\r\n                            }}\r\n                            >\r\n                                <option value=\"1\">Want to help more ?</option>\r\n                                <option value=\"2\">2x</option>\r\n                                <option value=\"4\">4x</option>\r\n                                <option value=\"6\">6x</option>\r\n                                <option value=\"6\">8x</option>\r\n                                <option value=\"10\">10x</option>\r\n                                <option value=\"15\">15x</option>\r\n                            </Form.Select>\r\n                            {product.owner === address &&\r\n                                <Button\r\n                                    variant=\"outline-danger\"\r\n                                    onClick={() => deleteProduct(product)}\r\n                                    className=\"btn\"\r\n                                >\r\n                                    <i className=\"bi bi-trash\"></i>\r\n                                </Button>\r\n                            }\r\n                        </Form>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <p className=\"text-light\">Top Donation</p>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                    <Identicon size={28} address={owner}/>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                            40 ALGOs\r\n                        </Badge>\r\n                    </Stack>\r\n                    </Card.Footer>\r\n                    <Card.Footer>\r\n                        <p className=\"text-light\">Last Donation</p>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                    <Identicon size={28} address={owner}/>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                            12 ALGOs\r\n                        </Badge>\r\n                    </Stack>\r\n                    </Card.Footer>\r\n                    <Card.Footer>\r\n                        <a href={/*</Card.Footer>process.env.REACT_APP_SITE_URL+'/donations'*/'#'} className=\"text-light\">See All Donations</a>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nProductSingle.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    product: PropTypes.instanceOf(Object).isRequired,\r\n    buyProduct: PropTypes.func.isRequired,\r\n    deleteProduct: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProductSingle;","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Image, Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst AddComment = ({ createComment , name}) => {\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        if (comment.length > 162 || comment.length < 1) { return false }\r\n        console.log(comment)\r\n        return true;\r\n    }, [comment]);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={handleShow}\r\n                variant=\"dark\"\r\n                className=\"rounded-pill px-0\"\r\n                style={{ width: \"138px\" }}\r\n            >\r\n                <i className=\"bi bi-plus\"></i>\r\n                Add Comment\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Header className=\"d-flex flex-column\">\r\n                    <Modal.Title>Commenting</Modal.Title>\r\n                    <p>on {name}</p>\r\n                </Modal.Header>\r\n                <Form>\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputComment\"\r\n                            label={`Comment ( ${comment.length}/112 Chars )`}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                placeholder=\"Nice Project, I will definitely Donate. Would love to see the results\"\r\n                                maxLength={112}\r\n                                style={{ height: \"80px\" }}\r\n                                onChange={(e) => {\r\n                                    setComment(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        disabled={!isFormFilled()}\r\n                        onClick={() => {\r\n                            createComment({\r\n                                comment\r\n                            });\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        Comment\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAddComment.propTypes = {\r\n    createComment: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddComment;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\r\nimport { truncateAddress} from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst Comment = ({address, comments}) => {\r\n    const {comment, appId, owner} =\r\n        comments;\r\n\r\n    return (\r\n        <Col key={appId}>\r\n            <Card className=\"h-100 bg-dark\">\r\n                <Card.Header>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                    <Identicon size={28} address={owner}/>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                    </Stack>\r\n                </Card.Header>\r\n                <Card.Body className=\"d-flex flex-column text-light\">\r\n                    <Card.Text className=\"flex-grow-1\">{comment}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nComment.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    comments: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default Comment;","import React, {useEffect, useState} from \"react\";\r\nimport {toast} from \"react-toastify\";\r\nimport Loader from \"../utils/Loader\";\r\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Row} from \"react-bootstrap\";\r\nimport { createCommentAction, getCommentsAction } from \"../../utils/comments\";\r\nimport AddComment from \"./AddComment\";\r\nimport Comment from \"./Comment\";\r\n\r\nconst Comments = ({address,uid,name,gComments}) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const getComments = async () => {\r\n        setLoading(true);\r\n        getCommentsAction(uid)\r\n            .then(comments => {\r\n                if (comments) {\r\n                    setComments(comments);\r\n                    gComments(comments.length);\r\n\t\t\t\t\tconsole.log(comments);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getComments();\r\n    }, []);\r\n\r\n    const createComment = async (data) => {\r\n\t    setLoading(true);\r\n\t    createCommentAction(address, data, uid)\r\n\t        .then((results) => {\r\n\t            toast(<NotificationSuccess text=\"Comment added successfully.\" tx_id={results[1]}/>);\r\n\t            getComments();\r\n\t        })\r\n\t        .catch(error => {\r\n\t            console.log(error);\r\n\t            toast(<NotificationError text=\"Failed to create a Comment.\"/>);\r\n\t            setLoading(false);\r\n\t        })\r\n\t};\r\n\r\n    if (loading) {\r\n\t    return <Loader height=\"100px\"/>;\r\n\t}\r\n\treturn (\r\n\t    <>\r\n\t        <div id=\"comments\" className=\"d-flex justify-content-between align-items-center mb-4\">\r\n\t            <h1 className=\"fs-4 fw-bold mb-0\">Comments</h1>\r\n\t            <AddComment createComment={createComment} name={name}/>\r\n\t        </div>\r\n\t        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n\t            <>\r\n\t                {comments.map((comment, index) => (\r\n\t                    <Comment\r\n\t                        address={address}\r\n\t                        comments={comment}\r\n\t                        key={index}\r\n\t                    />\r\n\t                ))}\r\n\t            </>\r\n\t        </Row>\r\n\t    </>\r\n\t);\r\n};\r\n\r\nComments.propTypes = {\r\n    uid: PropTypes.string.isRequired,\r\n    address: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    gComments: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Comments;","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport Loader from \"../components/utils/Loader\";\r\nimport { NotificationError, NotificationSuccess } from \"../components/utils/Notifications\";\r\nimport { buyProductAction, deleteProductAction, getProductAction, } from \"../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport ProductSingle from \"../components/marketplace/ProductSingle\";\r\nimport Comments from \"../components/marketplace/Comments\";\r\n\r\nconst SingleProduct = ({ address, fetchBalance }) => {\r\n\tconst [products, setProducts] = useState([]);\r\n\tconst [comments, setComments] = useState(0);\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst queryParams = new URLSearchParams(window.location.search);\r\n\tconst appId = queryParams.get('appId');\r\n\r\n\tconst setCommentsCount = (num)=>{\r\n\t\tsetComments(num);\r\n\t}\r\n\r\n\tconst getProducts = async () => {\r\n\t\tsetLoading(true);\r\n\t\tgetProductAction(appId)\r\n\t\t\t.then(products => {\r\n\t\t\t\tif (products) {\r\n\t\t\t\t\tsetProducts(products);\r\n\t\t\t\t\tconsole.log(products);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t})\r\n\t\t\t.finally(_ => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tgetProducts();\r\n\t}, []);\r\n\r\n\tconst likeProject = async (data) => {\r\n\t\t\r\n\t};\r\n\r\n\tconst buyProduct = async (product, count) => {\r\n\t\tsetLoading(true);\r\n\t\tbuyProductAction(address, product, count)\r\n\t\t\t.then(() => {\r\n\t\t\t\ttoast(<NotificationSuccess text=\"Donated to Project successfully\" />);\r\n\t\t\t\tgetProducts();\r\n\t\t\t\tfetchBalance(address);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t\ttoast(<NotificationError text=\"Failed to Donate Project. Please Try Again\" />);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t})\r\n\t};\r\n\r\n\tconst deleteProduct = async (product) => {\r\n\t\tsetLoading(true);\r\n\t\tdeleteProductAction(address, product.appId)\r\n\t\t\t.then(() => {\r\n\t\t\t\ttoast(<NotificationSuccess text=\"Project deleted successfully\" />);\r\n\t\t\t\tgetProducts();\r\n\t\t\t\tfetchBalance(address);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t\ttoast(<NotificationError text=\"Failed to delete project.\" />);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t})\r\n\t};\r\n\r\n\tif (loading) {\r\n\t\treturn <Loader />;\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n\t\t\t\t<h1 className=\"fs-3 mb-0\">{products[0].name}</h1>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={likeProject}\r\n\t\t\t\t\t\tvariant=\"dark\"\r\n\t\t\t\t\t\tclassName=\"rounded-pill px-0 mx-1\"\r\n\t\t\t\t\t\tstyle={{ width: \"45px\" }}\r\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Like\" >\r\n\t\t\t\t\t\t<i className=\"bi bi-heart-fill\"></i>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\thref={'#comments'}\r\n\t\t\t\t\t\tvariant=\"dark\"\r\n\t\t\t\t\t\tclassName=\"rounded-pill px-0\"\r\n\t\t\t\t\t\tstyle={{ width: \"50px\" }}\r\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title={`${comments} | Comment`} > \r\n\t\t\t\t\t\t{comments}&nbsp;&nbsp;<i className=\"bi bi-chat-square-text\"></i> \r\n\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<ProductSingle\r\n\t\t\t\taddress={address}\r\n\t\t\t\tproduct={products[0]}\r\n\t\t\t\tbuyProduct={buyProduct}\r\n\t\t\t\tdeleteProduct={deleteProduct}\r\n\t\t\t\tkey={products[0].appId}\r\n\t\t\t/>\r\n\t\t\t<Comments\r\n\t\t\t\taddress={address}\r\n\t\t\t\tgComments={setCommentsCount}\r\n\t\t\t\tname={products[0].name}\r\n\t\t\t\tuid={products[0].appId} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nSingleProduct.propTypes = {\r\n\taddress: PropTypes.string.isRequired,\r\n\tfetchBalance: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SingleProduct;","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Button, Container, Nav} from \"react-bootstrap\";\nimport Products from \"./pages/Products\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport coverImg from \"./assets/img/balloon.svg\"\nimport SingleProduct from \"./pages/SingleProduct\";\n\nconst App = function AppWrapper() {\n\n  const [address, setAddress] = useState(localStorage.getItem('algo_wallet_address'));\n  const [name, setName] = useState(localStorage.getItem('algo_wallet_name'));\n  const [balance, setBalance] = useState(0);\n  const queryParams = new URLSearchParams(window.location.search);\n  const appId = queryParams.get('appId');\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  if(address && Number(address) !== 0){\n    fetchBalance(address);\n  }\n\n  const connectWallet = async () => {\n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAddress(_account.address);\n              localStorage.setItem('algo_wallet_address',_account.address)\n              setName(_account.name);\n              localStorage.setItem('algo_wallet_name',_account.name)\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAddress(null);\n      setName(null);\n      setBalance(null);\n      localStorage.setItem('algo_wallet_name',0);\n      localStorage.setItem('algo_wallet_address',0);\n  };\n//..\nreturn (\n  <>\n      <Notification />\n      {address && Number(address) !== 0 ? (\n          <Container fluid=\"md\">\n              <Nav className=\"justify-content-between pt-3 pb-5\">\n                  <Nav.Item>\n                  <Nav.Link href=\"/\"><h3 style={{cursor:'pointer',fontWeight:'bold'}}>HelpMeDoit</h3></Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                      <Wallet\n                          address={address}\n                          name={name}\n                          amount={balance}\n                          disconnect={disconnect}\n                          symbol={\"ALGO\"}\n                      />\n                  </Nav.Item>\n              </Nav>\n              \n              <main>\n              {appId ? <SingleProduct address={address} fetchBalance={fetchBalance} /> : <Products address={address} fetchBalance={fetchBalance}/>}\n              </main>\n          </Container>\n      ) : (\n          <Cover name={\"Help Me Do It\"} title={<span><b className=\"cover-title\">Your Home<br/>For Help </b>🙏</span>} sub={\"A Decentralized Platform to Raise Funds For Your Most Important Project(s) and Donate Some ALGO(s) To Help Your Fellows In Need\"} coverImg={coverImg} connect={connectWallet}/>\n      )}\n  </>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"./index.css\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    HMDINote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytes,\r\n    numGlobalInts,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/HMDI_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/HMDI_clear.teal\";\r\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\r\n\r\nclass Product {\r\n    constructor(name, image, description, link, donation, goaldonation, donated, uwallets, appId, owner) {\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.link = link;\r\n        this.donation = donation;\r\n        this.goaldonation = goaldonation;\r\n        this.donated = donated;\r\n        this.uwallets = uwallets;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProductAction = async (senderAddress, product) => {\r\n    console.log(\"Adding Project...\")\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(HMDINote);\r\n    let name = new TextEncoder().encode(product.name);\r\n    let image = new TextEncoder().encode(product.image);\r\n    let description = new TextEncoder().encode(product.description);\r\n    let link = new TextEncoder().encode(product.link);\r\n    let donation = algosdk.encodeUint64(product.donation);\r\n    let goaldonation = algosdk.encodeUint64(product.goaldonation);\r\n\r\n    let appArgs = [name, image, description, link, donation, goaldonation]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalInts,\r\n        numGlobalByteSlices: numGlobalBytes,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return [appId,txId];\r\n}\r\n\r\nexport const buyProductAction = async (senderAddress, product, count) => {\r\n    console.log(\"Donating to Product...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Build required app args as Uint8Array\r\n    let buyArg = new TextEncoder().encode(\"donate\")\r\n    let countArg = algosdk.encodeUint64(count);\r\n    let appArgs = [buyArg, countArg]\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: product.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs\r\n    })\r\n\r\n    // Create PaymentTxn\r\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: senderAddress,\r\n        to: product.owner,\r\n        amount: product.donation * count,\r\n        suggestedParams: params\r\n    })\r\n\r\n    let txnArray = [appCallTxn, paymentTxn]\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray)\r\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n}\r\n\r\nexport const deleteProductAction = async (senderAddress, index) => {\r\n    console.log(\"Deleting application...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Create ApplicationDeleteTxn\r\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n        from: senderAddress, suggestedParams: params, appIndex: index,\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get application id of deleted application and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['txn']['txn'].apid;\r\n    console.log(\"Deleted app-id: \", appId);\r\n}\r\n\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getProductsAction = async () => {\r\n    console.log(\"Fetching products...\")\r\n    let note = new TextEncoder().encode(HMDINote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let products = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let product = await getApplication(appId)\r\n            if (product) {\r\n                products.push(product)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Products fetched.\")\r\n    return products\r\n}\r\n\r\nexport const getProductAction = async (appId) => {\r\n    console.log(\"Fetching product...\")\r\n    let note = new TextEncoder().encode(HMDINote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .applicationID(appId)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let products = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let product = await getApplication(appId)\r\n            if (product) {\r\n                products.push(product)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Product fetched.\")\r\n    return products\r\n}\r\n\r\nconst getApplication = async (appId) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return product\r\n        let owner = response.application.params.creator\r\n        let name = \"\"\r\n        let image = \"\"\r\n        let description = \"\"\r\n        let link = \"\"\r\n        let donation = 0\r\n        let goaldonation = 0\r\n        let donated = 0\r\n        let uwallets = 0\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"NAME\", globalState) !== undefined) {\r\n            let field = getField(\"NAME\", globalState).value.bytes\r\n            name = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"IMAGE\", globalState) !== undefined) {\r\n            let field = getField(\"IMAGE\", globalState).value.bytes\r\n            image = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\r\n            description = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"LINK\", globalState) !== undefined) {\r\n            let field = getField(\"LINK\", globalState).value.bytes\r\n            link = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"DONATION\", globalState) !== undefined) {\r\n            donation = getField(\"DONATION\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"GOALDONATION\", globalState) !== undefined) {\r\n            goaldonation = getField(\"GOALDONATION\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"DONATED\", globalState) !== undefined) {\r\n            donated = getField(\"DONATED\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"UWALLETS\", globalState) !== undefined) {\r\n            uwallets = getField(\"UWALLETS\", globalState).value.uint\r\n        }\r\n\r\n        return new Product(name, image, description, link, donation, goaldonation, donated, uwallets, appId, owner)\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}","import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n    algodToken: \"\",\r\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n    algodPort: \"\",\r\n    indexerToken: \"\",\r\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n    indexerPort: \"\",\r\n}\r\n\r\nexport const algoExpTest = \"https://testnet.algoexplorer.io/\";\r\nexport const algoExp = \"https://algoexplorer.io/\";\r\n\r\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\r\n\r\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\nexport const minRound = 21540981;\r\n\r\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\r\nexport const HMDINote = \"HMDI:uv001\"\r\nexport const HMDICommentsNote = \"HMDI-comments:uv001\"\r\nexport const HMDIProfilesNote = \"HMDI-profiles:uv01\"\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0;\r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 4; // Global variables stored as Int: count, sold, \r\nexport const numGlobalIntsComments = 1; // Global variables stored as Int: count, sold\r\nexport const numGlobalIntsProfiles = 0; // Global variables stored as Int: count, sold\r\nexport const numGlobalBytes = 4; // Global variables stored as Bytes: name, description, image, link\r\nexport const numGlobalBytesComments = 1; // Global variables stored as Bytes: name, description, image, link\r\nexport const numGlobalBytesProfiles = 4; // Global variables stored as Bytes: name, description, image, link\r\nexport const ALGORAND_DECIMALS = 6;\r\n\r\n","import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    HMDIProfilesNote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytesProfiles,\r\n    numGlobalIntsProfiles,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/HMDI_profile_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/HMDI_profile_clear.teal\";\r\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\r\n\r\nclass Profile {\r\n    constructor(name, image, bio, link, appId, owner) {\r\n        this.name = name;\r\n        this.image = image;\r\n        this.bio = bio;\r\n        this.link = link;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProfileAction = async (senderAddress, profile) => {\r\n    console.log(\"Adding Profile...\" + senderAddress)\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(HMDIProfilesNote);\r\n    let name = new TextEncoder().encode(profile.name);\r\n    let image = new TextEncoder().encode(profile.image);\r\n    let bio = new TextEncoder().encode(profile.bio);\r\n    let link = new TextEncoder().encode(profile.link);\r\n    let appArgs = [name, image, bio, link]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalIntsProfiles,\r\n        numGlobalByteSlices: numGlobalBytesProfiles,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return [appId, txId];\r\n}\r\n\r\nexport const editProfileAction = async (senderAddress, profile) => {\r\n    console.log(\"Edit Profile...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Build required app args as Uint8Array\r\n    let editArg = new TextEncoder().encode(\"edit\");\r\n    let name = new TextEncoder().encode(profile.name);\r\n    let image = new TextEncoder().encode(profile.image);\r\n    let bio = new TextEncoder().encode(profile.bio);\r\n    let link = new TextEncoder().encode(profile.link);\r\n    let appArgs = [editArg, name, image, bio, link];\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: profile.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs,\r\n    });\r\n\r\n    let txnArray = [appCallTxn];\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray);\r\n    for (let i = 0; i < 1; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(\r\n        txnArray.map((txn) => txn.toByte())\r\n    );\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient\r\n        .sendRawTransaction(signedTxn.map((txn) => txn.blob))\r\n        .do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\r\n        \"Group transaction \" +\r\n        tx.txId +\r\n        \" confirmed in round \" +\r\n        confirmedTxn[\"confirmed-round\"]\r\n    );\r\n    return [profile.appId, tx.txId];\r\n};\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getProfileAction = async (senderAddress) => {\r\n    console.log(\"Fetching Profile...\")\r\n    let note = new TextEncoder().encode(HMDIProfilesNote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .address(senderAddress)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let profiles = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let profile = await getApplication(appId)\r\n            if (profile) {\r\n                profiles.push(profile)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Profile fetched.\")\r\n    return profiles\r\n}\r\n\r\nconst getApplication = async (appId) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return product\r\n        let owner = response.application.params.creator\r\n        let name = \"\"\r\n        let image = \"\"\r\n        let bio = \"\"\r\n        let link = \"\"\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"NAME\", globalState) !== undefined) {\r\n            let field = getField(\"NAME\", globalState).value.bytes\r\n            name = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"IMAGE\", globalState) !== undefined) {\r\n            let field = getField(\"IMAGE\", globalState).value.bytes\r\n            image = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"BIO\", globalState) !== undefined) {\r\n            let field = getField(\"BIO\", globalState).value.bytes\r\n            bio = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"LINK\", globalState) !== undefined) {\r\n            let field = getField(\"LINK\", globalState).value.bytes\r\n            link = base64ToUTF8String(field)\r\n        }\r\n\r\n        return new Profile(name, image, bio, link, appId, owner)\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}"],"sourceRoot":""}